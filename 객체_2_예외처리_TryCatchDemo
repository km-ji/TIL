#1
package chap09.sec01;

public class TryCatchDemo01 {
	public static void main(String[] args) {
		int[] array= {0,1,2};
		try {
			//원소가 3개이므로 array[2]까지 존재
			System.out.println("마지막 원소 ==> "+array[3]);
			//이전 실행문에서 예외가 발생했으므로 이 실행문은 실행되지 않음
			System.out.println("첫 번째 원소 ==> "+array[0]);
		} catch (ArrayIndexOutOfBoundsException ae) {
			System.out.println("원소가 존재하지 않습니다."); //예외가 발생하면 이 문구를 출력해달라고 하는 것
		} 
		System.out.println("어이쿠!!");
	}	
}


#2
package chap09.sec01;

public class TryCatchDemo02 {
	public static void main(String[] args) {
		int dividend =10;
		try {
			int divisor=Integer.parseInt(args[0]);
			System.out.println(dividend/divisor);
			//배열의 범위를 벗어난 인덱스를 사용할 때 발생
			//여기서는 main()메서드의 인수가 없을 때 발생
		} catch(ArrayIndexOutOfBoundsException ae) {
			System.out.println("원소가 존재하지 않습니다.");
			//main() 메서드의 인수를 숫자로 바꿀 수 없을 때 발생
		} catch(NumberFormatException ne) {
			System.out.println("숫자가 아닙니다.");
		 //main()메서드의 인수가 0일때 나눌 수 없으므로 발생
		} catch (ArithmeticException ae) {
			System.out.println("0으로 나눌 수 없습니다.");
		} finally {
			System.out.println("항상 실행됩니다.");
		} 
		System.out.println("종료");
	}
}


#3
package chap09.sec01;

public class TryCatchDemo03 {
	public static void main(String[] args) {
		int[] array= {0,1,2};
		try {
			int x=array[3];
		} catch(Exception e) {
			System.out.println("어이쿠");
		} catch(ArrayIndexOutOfBoundsException e) { //이미 위에서 에러가 다 잡혔는데 이렇게 해주면 안됨(순서중요)
			System.out.println("원소가 존재하지 않습니다."); 
		}
		System.out.println("종료");
	}
}


#4
package chap09.sec01;

public class TryCatch4Demo {
	public static void main(String[] args) {
		Reso reso=new Reso();
		
		try(reso){
			reso.show();
		} catch (Exception e) {
			System.out.println("예외처리");
		} 
	}
}


class Reso implements AutoCloseable{ //autocloseable은 사용한 리소스를 자동반납하는 수단
	void show() {
		System.out.println("자원 사용");
	}
	
	@Override
	public void close() throws Exception{
		System.out.println("자원닫기");
	}
}


